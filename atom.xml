<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>來自馬祖的前端工程師</title>
  <subtitle>Jhao Cheng Wu</subtitle>
  <link href="/Blog/atom.xml" rel="self"/>
  
  <link href="http://swarchen.github.io/"/>
  <updated>2016-09-27T11:17:30.000Z</updated>
  <id>http://swarchen.github.io/</id>
  
  <author>
    <name>Jhao Cheng Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Transition</title>
    <link href="http://swarchen.github.io/2016/09/27/Transition/"/>
    <id>http://swarchen.github.io/2016/09/27/Transition/</id>
    <published>2016-09-27T07:57:30.000Z</published>
    <updated>2016-09-27T11:17:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Transition可以讓元素在兩個不同的CSS style之間作轉換</p>
<p>讓網站更具互動性</p>
<a id="more"></a>
<p>要達到Trasition的動畫效果</p>
<p>首先要讓元素有<span class="highlight-text green">兩種style </span>

再加上<span class="highlight-text green">transition</span></p>
<p>並且讓trasition有個<span class="highlight-text green">trigger</span>(啟動)的條件</p>
<p>直接來看要怎麼讓一個方形元素的背景色做變化</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.rect</span>&#123;</div><div class="line">  <span class="attribute">background-color</span>:LightSeaGreen; <span class="comment">/* 第一種style */</span></div><div class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">  <span class="attribute">transition-property</span>: background-color; <span class="comment">/* 選擇要做變化的style */</span></div><div class="line">  <span class="attribute">transition-duration</span>: <span class="number">1s</span>; <span class="comment">/* 變化所需的時間 */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.rect</span><span class="selector-pseudo">:hover</span>&#123; <span class="comment">/* Hover是這個trasition的trigger */</span></div><div class="line">  <span class="attribute">background-color</span>:Tomato; <span class="comment">/* 第二種style */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/0hcn951q/embedded/result,html,css/light" frameborder="0" allowfullscreen></iframe>
<p>而這是針對一種Transition時可以這樣寫</p>
<p>如果一次有多個變化要一起表現呢？</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.rect</span>&#123;</div><div class="line">  <span class="comment">/* ... */</span></div><div class="line">  <span class="attribute">transition-property</span>: background-color,width,height; <span class="comment">/* 選擇所有要做變化的style並且用逗號隔開 */</span></div><div class="line">  <span class="attribute">transition-duration</span>: <span class="number">1s</span>,.<span class="number">5s</span>,.<span class="number">8s</span>; <span class="comment">/* 個別變化所需的時間 */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.rect</span><span class="selector-pseudo">:hover</span>&#123; </div><div class="line">  <span class="comment">/* ... */</span></div><div class="line">  <span class="attribute">width</span>:<span class="number">150px</span>; <span class="comment">/* 新的變化 */</span></div><div class="line">  <span class="attribute">height</span>:<span class="number">150px</span>; <span class="comment">/* 新的變化 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/0hcn951q/1/embedded/result,html,css/light" frameborder="0" allowfullscreen></iframe>
<h2 id="Transition-Delay"><a href="#Transition-Delay" class="headerlink" title="Transition Delay"></a>Transition Delay</h2><p>如果想要讓某個transition延遲觸發</p>
<p>可以透過transition-delay來達成</p>
<p>來試著讓方塊在放大之後才開始變色</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.rect</span>&#123;</div><div class="line">  <span class="comment">/* ... */</span></div><div class="line">    <span class="attribute">transition-delay</span>: .<span class="number">8s</span>,<span class="number">0s</span>,<span class="number">0s</span>; <span class="comment">/* 個別transition delay的時間 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/0hcn951q/2/embedded/result,html,css/light" frameborder="0" allowfullscreen></iframe>
<h2 id="Transition-Timing"><a href="#Transition-Timing" class="headerlink" title="Transition Timing"></a>Transition Timing</h2><p>Transition Timing 可以調整變化的過程的速度</p>
<p>CSS提供預設的5種keywords可以使用</p>
<blockquote>
<p>linear, ease, ease-in, ease-out, and ease-in-out</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition-timing-function</span><span class="selector-pseudo">:linear</span>;</div></pre></td></tr></table></figure>
<iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/4fjuozke/embedded/result,html,css/light" frameborder="0" allowfullscreen></iframe>
<h3 id="cubic-bezier"><a href="#cubic-bezier" class="headerlink" title="cubic-bezier"></a>cubic-bezier</h3><p>Cubic-Bezier 可以讓我們更靈活的運用動畫</p>
<p>使動畫的變化更活潑</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">cubic-bezier</span>(<span class="selector-class">.20</span>, <span class="selector-class">.96</span>, <span class="selector-class">.74</span>, <span class="selector-class">.07</span>);</div></pre></td></tr></table></figure>
<p>用圖形來表示Cubic-Bezier</p>
<p>橫軸為時間，縱軸為動畫的進度</p>
<p><img src="http://i.imgur.com/dOQTIFs.png" height="200px" alt="cubic-bezier"></p>
<p>平緩的線代表動畫速度較慢</p>
<p>越陡的線代表動畫速度較快</p>
<p>要憑空想出來這個曲線是不可能的</p>
<p>所以推薦一個網站可以動態的去調整自己想要的曲線</p>
<p><a href="http://cubic-bezier.com/" target="_blank" rel="external">cubic-bezier</a></p>
<h2 id="Transition-Shorthand"><a href="#Transition-Shorthand" class="headerlink" title="Transition Shorthand"></a>Transition Shorthand</h2><p>如果動畫一多起來</p>
<p>總不希望每個動畫都要寫一次CSS的property,duration之類的</p>
<p>CSS提供了下面的寫法來簡化</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 1<span class="selector-tag">s</span> <span class="selector-tag">ease-in</span> <span class="selector-class">.5s</span>;</div></pre></td></tr></table></figure>
<p>就可以一次將所有的設定套用在每個transition上面</p>
<iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/0hcn951q/3/embedded/result,html,css/light" frameborder="0" allowfullscreen></iframe>
<p>也可以透過換行來定義不同的Transition</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">background-color</span> 1<span class="selector-tag">s</span> <span class="selector-tag">ease-in</span> <span class="selector-class">.8s</span>, <span class="comment">/* 順序分別是style,duration,timing,delay */</span></div><div class="line">			<span class="selector-tag">width</span> <span class="selector-class">.5s</span>,</div><div class="line">			<span class="selector-tag">height</span> <span class="selector-class">.8s</span>;</div></pre></td></tr></table></figure>
<iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/0hcn951q/4/embedded/result,html,css/light" frameborder="0" allowfullscreen></iframe>
]]></content>
    
    <summary type="html">
    
      透過閱讀前端經典好書，來補齊前端工程的知識點
    
    </summary>
    
      <category term="CSS" scheme="http://swarchen.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://swarchen.github.io/tags/CSS/"/>
    
      <category term="先學走，再學跑" scheme="http://swarchen.github.io/tags/%E5%85%88%E5%AD%B8%E8%B5%B0%EF%BC%8C%E5%86%8D%E5%AD%B8%E8%B7%91/"/>
    
  </entry>
  
  <entry>
    <title>Transform</title>
    <link href="http://swarchen.github.io/2016/09/27/transform/"/>
    <id>http://swarchen.github.io/2016/09/27/transform/</id>
    <published>2016-09-27T06:41:51.000Z</published>
    <updated>2016-09-27T11:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS中的Transform可以直接改變網頁中的元素</p>
<p>套用Transform之後並不會改變元素本來在HTML中版面的位置或大小</p>
<p>而是顯示上被改變了</p>
<p>用下面的例子可以看到放大的元素不會因為放大而自動往下排版</p>
<p>而是直接覆蓋過附近的元素</p>
<iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/dp4jx4wp/3/embedded/result,html,css/light" frameborder="0" allowfullscreen></iframe>
<a id="more"></a>
<h5 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h5><ul>
<li><a href="#normal">常用的transform</a><ul>
<li><a href="#rotate">Rotate</a>  </li>
<li><a href="#scale">Scale</a>  </li>
<li><a href="#skew">Skew</a>  </li>
</ul>
</li>
<li><a href="#origin">Transform-origin</a></li>
</ul>
<p><a name="normal"></a></p>
<h1 id="常用的transform"><a href="#常用的transform" class="headerlink" title="常用的transform"></a>常用的transform</h1><p><a name="rotate"></a></p>
<h2 id="Rotate"><a href="#Rotate" class="headerlink" title="Rotate"></a>Rotate</h2><p>Rotate就是將畫面中的元素旋轉</p>
<p>用法：
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);<span class="comment">/* 順時鐘旋轉45度 */</span></div></pre></td></tr></table></figure></p>
<iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/5a33sash/embedded/result,html,css/light" frameborder="0" allowfullscreen></iframe>
<p><a name="scale"></a></p>
<h2 id="Scale"><a href="#Scale" class="headerlink" title="Scale"></a>Scale</h2><p>Rotate就是將畫面中的元素放大縮小</p>
<p>用法：
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(2);</div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(0<span class="selector-class">.3</span>);</div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(<span class="selector-class">.5</span>,2); <span class="comment">/* x軸方向縮小一半，y方向放大兩倍 */</span></div></pre></td></tr></table></figure></p>
<iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/dp4jx4wp/4/embedded/result,html,css/light" frameborder="0" allowfullscreen></iframe>
<p><a name="skew"></a></p>
<h2 id="Skew"><a href="#Skew" class="headerlink" title="Skew"></a>Skew</h2><p>Skew就是將畫面中的元素作傾斜</p>
<p>用法：
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skew</span>(45<span class="selector-tag">deg</span>, 0);<span class="comment">/* 相對垂直軸傾斜45度 */</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skew</span>(0, 45<span class="selector-tag">deg</span>);<span class="comment">/* 相對水平軸傾斜45度 */</span></div></pre></td></tr></table></figure></p>
<iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/dp4jx4wp/5/embedded/result,html,css/light" frameborder="0" allowfullscreen></iframe>
<p><a name="origin"></a></p>
<h2 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h2><p>通常在套用Transform的時候</p>
<p>瀏覽器會自動以元素的中心點作為Transform的參考點</p>
<p>我們也可以透過 transform-origin 來作改變</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform-origin</span>: <span class="selector-tag">left</span> <span class="selector-tag">top</span>; <span class="comment">/* 透過keywords去調整 */</span></div><div class="line"><span class="selector-tag">transform-origin</span>: 0 0; <span class="comment">/* 透過px值去調整 */</span></div><div class="line"><span class="selector-tag">transform-origin</span>: 0% 0%; <span class="comment">/* 透過百分比去調整 */</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      透過閱讀前端經典好書，來補齊前端工程的知識點
    
    </summary>
    
      <category term="CSS" scheme="http://swarchen.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://swarchen.github.io/tags/CSS/"/>
    
      <category term="先學走，再學跑" scheme="http://swarchen.github.io/tags/%E5%85%88%E5%AD%B8%E8%B5%B0%EF%BC%8C%E5%86%8D%E5%AD%B8%E8%B7%91/"/>
    
  </entry>
  
  <entry>
    <title>Font-Size</title>
    <link href="http://swarchen.github.io/2016/09/27/font-size/"/>
    <id>http://swarchen.github.io/2016/09/27/font-size/</id>
    <published>2016-09-26T16:20:17.000Z</published>
    <updated>2016-09-27T11:18:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS提供了非常多font-size的單位</p>
<p>用在網頁顯示上的 
<span class="highlight-text danger">keywords</span>, 
<span class="highlight-text danger">ems</span>, 
<span class="highlight-text danger">exes</span>, 
<span class="highlight-text danger">pixels</span>, 
<span class="highlight-text danger">percentages</span>
<br>
用在列印的
<span class="highlight-text danger">picas</span>, 
<span class="highlight-text danger">points</span>, 
<span class="highlight-text danger">inches</span>, 
<span class="highlight-text danger">centimeters</span>, 
<span class="highlight-text danger">millimeters</span>.</p>
<a id="more"></a>
<h2 id="Pixels"><a href="#Pixels" class="headerlink" title="Pixels"></a>Pixels</h2><blockquote>
<p>透過 Pixel 設定字型大小是最直接的方式，瀏覽器會依照設定的pixel顯示字型。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-size</span>: 36<span class="selector-tag">px</span>;</div></pre></td></tr></table></figure>
<h2 id="Keywords"><a href="#Keywords" class="headerlink" title="Keywords"></a>Keywords</h2><blockquote>
<p>透過 Keywords 設定字型大小，使用上會有所限制，只有七種大小能夠選擇</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-size</span>: <span class="selector-tag">xx-small</span>, <span class="selector-tag">x-small</span>, <span class="selector-tag">small</span>, <span class="selector-tag">medium</span>, <span class="selector-tag">large</span>, <span class="selector-tag">x-large</span>, <span class="selector-tag">xx-large</span>;</div></pre></td></tr></table></figure>
<h2 id="Percentages"><a href="#Percentages" class="headerlink" title="Percentages"></a>Percentages</h2><blockquote>
<p>透過 Keywords 設定字型大小，直接用倍數乘上Base text size</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-size</span>: 200%;</div></pre></td></tr></table></figure>
<div class="alert info"><p>Base text size 大部分瀏覽器初始的font-size設定為16px</p>
</div>
<h2 id="ems"><a href="#ems" class="headerlink" title="ems"></a>ems</h2><blockquote>
<p>透過 em 設定字型大小，跟百分比很像，也是用倍數乘上Base text size</p>
</blockquote>
<div class="alert danger no-icon"><p>em 會讓文字的大小透過元素inherit(傳承)下去</p>
</div>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Base text size == 16px */</span></div><div class="line"></div><div class="line"><span class="selector-class">.page</span>&#123;</div><div class="line">	<span class="attribute">font-size</span>: .<span class="number">5em</span>; <span class="comment">/* 16px * 0.5 = 8px */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.page</span> <span class="selector-tag">p</span>&#123;</div><div class="line">	<span class="attribute">font-size</span>: .<span class="number">5em</span>; <span class="comment">/* 16px * 0.5 * 0.5 = 4px */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="rems"><a href="#rems" class="headerlink" title="rems"></a>rems</h2><blockquote>
<p>透過 rem 設定字型大小，可以改善em 所造成的傳承疊加的問題</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Base text size == 16px */</span></div><div class="line"></div><div class="line"><span class="selector-class">.page</span>&#123;</div><div class="line">	<span class="attribute">font-size</span>: .<span class="number">5rem</span>; <span class="comment">/* 16px * 0.5 = 8px */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.page</span> <span class="selector-tag">p</span>&#123;</div><div class="line">	<span class="attribute">font-size</span>: .<span class="number">5rem</span>; <span class="comment">/* 16px * 0.5 = 8px */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      透過閱讀前端經典好書，來補齊前端工程的知識點
    
    </summary>
    
      <category term="CSS" scheme="http://swarchen.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://swarchen.github.io/tags/CSS/"/>
    
      <category term="先學走，再學跑" scheme="http://swarchen.github.io/tags/%E5%85%88%E5%AD%B8%E8%B5%B0%EF%BC%8C%E5%86%8D%E5%AD%B8%E8%B7%91/"/>
    
  </entry>
  
  <entry>
    <title>Pseudo-Classes and Pseudo-Elements</title>
    <link href="http://swarchen.github.io/2016/09/26/Pseudo-Classes-and-Pseudo-Elements/"/>
    <id>http://swarchen.github.io/2016/09/26/Pseudo-Classes-and-Pseudo-Elements/</id>
    <published>2016-09-26T05:08:12.000Z</published>
    <updated>2016-09-26T16:15:12.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt -->
<div class="alert info no-icon"><p>閱讀書籍：<a href="http://shop.oreilly.com/product/0636920036357.do" target="_blank" rel="external">CSS: The Missing Manual</a></p>
</div>
<h1 id="Pseudo-Classes-and-Pseudo-Elements"><a href="#Pseudo-Classes-and-Pseudo-Elements" class="headerlink" title="Pseudo-Classes and Pseudo-Elements"></a>Pseudo-Classes and Pseudo-Elements</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Pseudo-Classes 在CSS3是用一個分號來表示 */</span></div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> <span class="comment">/* 使用者還沒點擊過的連結 */</span></div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> <span class="comment">/* 使用者點擊過的連結 */</span></div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> <span class="comment">/* 使用者滑鼠移上去的連結 */</span></div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> <span class="comment">/* 使用者正在點擊的連結 */</span></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> <span class="comment">/* 使用者正在對input做編輯 */</span></div></pre></td></tr></table></figure>
<iframe scrolling="no" width="100%" height="200px" src="//jsfiddle.net/hyvj67xw/embedded/result,html,css/light" frameborder="0" allowfullscreen></iframe>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Pseudo-Elements 在CSS3是用兩個分號來表示 */</span></div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> <span class="comment">/* 段落的第一個文字的樣式 */</span></div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> <span class="comment">/* 段落的第一行文字的樣式 */</span></div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span></div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> <span class="comment">/* before和after是可以插入content文字的Pseudo-Element而不用額外寫在HTML當中 */</span></div><div class="line"><span class="selector-pseudo">::selection</span> <span class="comment">/* 使用者在畫面中選取起來的文字 */</span></div></pre></td></tr></table></figure>
<iframe scrolling="no" width="100%" height="200px" src="//jsfiddle.net/xfc4hstz/3/embedded/result,html,css/light" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      透過閱讀前端經典好書，來補齊前端工程的知識點
    
    </summary>
    
      <category term="CSS" scheme="http://swarchen.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://swarchen.github.io/tags/CSS/"/>
    
      <category term="先學走，再學跑" scheme="http://swarchen.github.io/tags/%E5%85%88%E5%AD%B8%E8%B5%B0%EF%BC%8C%E5%86%8D%E5%AD%B8%E8%B7%91/"/>
    
  </entry>
  
  <entry>
    <title>用 Modernizr 來判斷瀏覽器是否支援 html5 的 features</title>
    <link href="http://swarchen.github.io/2016/09/26/%E7%94%A8Modernizr-%E4%BE%86%E5%88%A4%E6%96%B7%E7%80%8F%E8%A6%BD%E5%99%A8%E6%98%AF%E5%90%A6%E6%94%AF%E6%8F%B4html5%E7%9A%84features/"/>
    <id>http://swarchen.github.io/2016/09/26/用Modernizr-來判斷瀏覽器是否支援html5的features/</id>
    <published>2016-09-26T05:08:12.000Z</published>
    <updated>2016-09-26T09:25:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>先到<a href="https://modernizr.com" target="_blank" rel="external">modernizr</a>下載modernizr的js檔案</p>
<p>並且選擇自己需要的features再按build</p>
<p>就會取得一個 <em>modernizr-custom.min.js</em> 的檔案</p>
<a id="more"></a>
<p>之後將js檔加入到html檔案當中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5 Feature Detection<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"modernizr-custom.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">   ...</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<p>之後當你的網站讀取時</p>
<p>Modernizr就會先做快速的測試</p>
<p>然後回傳一個 叫作 Modernizr javascript object</p>
<p><img src="http://i.imgur.com/bieMWuA.png" alt="Modernizr"></p>
<p>之後便可以透過這個Modernizr去動態的操作網頁在不同瀏覽器的顯示狀態</p>
<p>達到更好的使用者體驗<del>IE</del></p>
<p>Modernizr不只有支援 HTML</p>
<p>還有CSS and JavaScript的相容性測試</p>
<p>更多關於Modernizr的使用方式可以直接看官方的docs</p>
<p><a href="https://modernizr.com/docs" target="_blank" rel="external">Modernizr docs</a></p>
<p><img src="http://dqbgk6hf2uifn.cloudfront.net/_img/e7ce6d2e-eb03-ec68-612a-52a0df562133_0" alt=""></p>
]]></content>
    
    <summary type="html">
    
      用 Modernizr 來判斷瀏覽器是否支援 html5 的 features
    
    </summary>
    
      <category term="html5" scheme="http://swarchen.github.io/categories/html5/"/>
    
    
      <category term="modernizr" scheme="http://swarchen.github.io/tags/modernizr/"/>
    
      <category term="html5" scheme="http://swarchen.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>javascript - Closure</title>
    <link href="http://swarchen.github.io/2016/09/22/Closure/"/>
    <id>http://swarchen.github.io/2016/09/22/Closure/</id>
    <published>2016-09-22T14:46:23.000Z</published>
    <updated>2016-09-24T11:58:56.000Z</updated>
    
    <content type="html"><![CDATA[<div class="alert info no-icon"><p>Closure is when a &quot;function&quot; &quot;remembers&quot; its lexical scope even when the function is executed outside that lexical scope.
Closure 是指說一個function記住了他在被定義的當下時的lexical scope，即使function在執行的時候是在當時的lexical scope之外</p>
</div>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> bar = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(bar); <span class="comment">// reference bar </span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	bam(baz); <span class="comment">// 透過bam 傳出去</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bam</span>(<span class="params">baz</span>) </span>&#123;</div><div class="line">	baz(); <span class="comment">// 在不同的環境下執行</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo();</div></pre></td></tr></table></figure>
<p>function baz 裡面的bar 由於reference了 foo function中的bar</p>
<p>讓bar 變數可以在foo執行完後繼續存在在記憶體中 </p>
<p>而不會被garbage collected</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> bar = <span class="string">"bar"</span>;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(bar)</div><div class="line">  &#125;,<span class="number">1000</span>);</div><div class="line">  bar = <span class="string">"bar2"</span> </div><div class="line">&#125;</div><div class="line">foo() <span class="comment">//  "bar2"</span></div></pre></td></tr></table></figure>
<p>因為bar reference的是變數</p>
<p>而不是變數的當下的值</p>
<p>所以當bar的值被改變成 &quot;bar2&quot; 後</p>
<p>console 出來的結果就會是 &quot;bar2&quot;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++)&#123;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"i: "</span> + i);</div><div class="line">	&#125;, i * <span class="number">1000</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這段程式碼執行出來的結果會是
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">i: <span class="number">6</span></div><div class="line">i: <span class="number">6</span></div><div class="line">i: <span class="number">6</span></div><div class="line">i: <span class="number">6</span></div><div class="line">i: <span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>原因是在於所有的i都是reference 了 global scope底下的i</p>
<p>當loop結束後 setTimeout的event被觸發時</p>
<p>所console.log出來的結果就會像上面顯示的那樣</p>
<p>這樣的情況要如何解決呢？</p>
<p>可以透過function去create出一個新的scope</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++)&#123;</div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"i: "</span> + i);</div><div class="line">    &#125;, i * <span class="number">1000</span>)</div><div class="line">  &#125;)(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面的code會console出&quot;bar&quot;</p>
<p>但他是closure嗎？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> o = &#123; <span class="attr">bar</span>: <span class="string">"bar"</span> &#125;;</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">obj</span>: o&#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo.obj.bar); <span class="comment">// "bar"</span></div></pre></td></tr></table></figure>
<div class="alert info no-icon"><p>Closure 是指說一個function記住了他在被定義的當下時的lexical scope，即使function在執行的時候是在當時的lexical scope之外</p>
</div>
<p>上述的例子並不是透過function去reference，而只是單純的object reference</p>
<h3 id="module-pattern-javascript"><a href="#module-pattern-javascript" class="headerlink" title="module pattern javascript"></a>module pattern javascript</h3><p>用Closure可以將javascript module化</p>
<p>將原有的function包在IIFE當中</p>
<p>透過return 內部的function 作為public API</p>
<p>讓外部程式可以執行module內部的程式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> publicAPI = &#123;</div><div class="line">    <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      publicAPI.baz();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">baz</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"baz"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> publicAPI;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"></div><div class="line">foo.baz()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      Kyle Simpson 在Frontend masters 的 javascript workshop
    
    </summary>
    
      <category term="javascript" scheme="http://swarchen.github.io/categories/javascript/"/>
    
    
      <category term="closure" scheme="http://swarchen.github.io/tags/closure/"/>
    
      <category term="javascript" scheme="http://swarchen.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript - This</title>
    <link href="http://swarchen.github.io/2016/09/22/this/"/>
    <id>http://swarchen.github.io/2016/09/22/this/</id>
    <published>2016-09-22T12:45:10.000Z</published>
    <updated>2016-09-22T15:22:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>this有四種綁定的方式</p>
<p>主要是以callsite發生的時機來決定</p>
<p>callsite就是()被執行的位置</p>
<h3 id="1-Default-binding-rule"><a href="#1-Default-binding-rule" class="headerlink" title="1. Default binding rule"></a>1. Default binding rule</h3><p>如果是在 strict mode ， this 指向的是 undefined</p>
<p>若不是 strict mode ， this 指向的事 global object</p>
<a id="more"></a>
<h3 id="2-Implicit-biding-rule"><a href="#2-Implicit-biding-rule" class="headerlink" title="2. Implicit biding rule"></a>2. Implicit biding rule</h3><p>在javascript中所有物件都是reference from object 或者 function</p>
<p>如下面的例子</p>
<p>foo,o2.foo,o3.foo都是reference from 第一行定義的 function foo </p>
<p>o2.foo(),o3.foo()的callsite 透過 .(dot) reference o2 跟 o3 這兩個object</p>
<p>所以this keyword 就是指向 o2,o3</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.bar)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = <span class="string">"bar1"</span>;</div><div class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">bar</span>: <span class="string">"bar2"</span>, <span class="attr">foo</span>: foo &#125;;</div><div class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">bar</span>: <span class="string">"bar3"</span>, <span class="attr">foo</span>: foo &#125;;</div><div class="line"></div><div class="line">foo(); <span class="comment">//"bar1"</span></div><div class="line">o2.foo(); <span class="comment">// "bar2"</span></div><div class="line">o3.foo(); <span class="comment">// "bar3"</span></div></pre></td></tr></table></figure>
<p>從下面的例子可以更清楚地看到</p>
<p>不論原本的 function 是在哪邊被定義的</p>
<p>在執行的時候都是reference 而不是擁有那個function</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o1 = &#123;</div><div class="line">	<span class="attr">bar</span>: <span class="string">"bar1"</span>,</div><div class="line">	<span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.bar)</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">bar</span>: <span class="string">"bar2"</span>, <span class="attr">foo</span>: o1.foo &#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = <span class="string">"bar3"</span>;</div><div class="line"><span class="keyword">var</span> foo = o1.foo;</div><div class="line"></div><div class="line">o1.foo(); <span class="comment">// "bar1"</span></div><div class="line">o2.foo(); <span class="comment">// "bar2"</span></div><div class="line">foo();  <span class="comment">// "bar3"</span></div></pre></td></tr></table></figure>
<h4 id="binding-confusion"><a href="#binding-confusion" class="headerlink" title="binding confusion"></a>binding confusion</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> bar = <span class="string">"bar1"</span>;</div><div class="line">	<span class="keyword">this</span>.baz = baz;</div><div class="line">	<span class="keyword">this</span>.baz();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.bar);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = <span class="string">"bar2"</span>;</div><div class="line">foo();</div></pre></td></tr></table></figure>
<p>第十一行的 foo 的 callsite 是在 global scope底下</p>
<p>所以 reference function 中的 this 指向的是 global object</p>
<p>也就是第三行的 this.baz = baz; 等同於 global.baz = baz;</p>
<p>但在 global scope底下 已經有了第六行定義的 baz function</p>
<p>感覺上就是做了一個 a = a 的沒意義的操作</p>
<p>第四行的 this.baz() 的callstie 執行時 因為前面有 this object</p>
<p>所以 implicit binding rull apply</p>
<p>reference 的 baz function 中的 this 指向的是 this object 也就是 global object</p>
<p>因此執行的結果就會是 console.log(global.bar) 在瀏覽器中就是 console.log(window.bar)</p>
<h3 id="3-Explicit-binding-rule"><a href="#3-Explicit-binding-rule" class="headerlink" title="3. Explicit binding rule"></a>3. Explicit binding rule</h3><p>Explicit binding 就是當我們使用 .call 或者 .apply 去做function 的執行的時候</p>
<p>就明確指定了傳入的obj 為this</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.bar);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = <span class="string">"bar1"</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">bar</span>: <span class="string">"bar2"</span> &#125;;</div><div class="line"></div><div class="line">foo(); <span class="comment">// "bar1"</span></div><div class="line">foo.call(obj); <span class="comment">// "bar2"</span></div></pre></td></tr></table></figure>
<p>javascript 也提供了一個bind的 function</p>
<p>讓 Explicit binding變成hard binding</p>
<p>在hard binding之後的function中</p>
<p>this的值就已經無法被改變</p>
<p>結果就像下面這樣</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.bar);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo2 = foo.bind(obj);</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = <span class="string">"bar1"</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">bar</span>: <span class="string">"bar2"</span> &#125;;</div><div class="line"></div><div class="line">foo(); <span class="comment">// "bar1"</span></div><div class="line">foo.call(obj); <span class="comment">// "bar2"</span></div><div class="line">foo2(); <span class="comment">// "bar2"</span></div><div class="line">foo2(<span class="string">"I want another string QQ"</span>); <span class="comment">// "bar2"</span></div></pre></td></tr></table></figure>
<h3 id="4-New-keyword"><a href="#4-New-keyword" class="headerlink" title="4. New keyword"></a>4. New keyword</h3><p>在任何的function 之前加上new</p>
<p>會讓function call 變成 construction call</p>
<p>過程是這樣的</p>
<ol>
<li>產生一個全新的object</li>
<li>這個全新的object和先前的object完全無關</li>
<li>object的this指向自己</li>
<li>最後會自動return this</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.baz = <span class="string">"baz"</span>;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.bar + <span class="string">" "</span> + baz);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = <span class="string">"bar"</span>;</div><div class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> foo(); <span class="comment">// undefined undefined</span></div></pre></td></tr></table></figure>
<h2 id="4種binding方式的優先順序"><a href="#4種binding方式的優先順序" class="headerlink" title="4種binding方式的優先順序"></a>4種binding方式的優先順序</h2><ol>
<li>Was the function called with <code>new</code>?</li>
<li>Was the function called with <code>call</code> or <code>apply</code> specifying an explicit this?</li>
<li>Was the function valled via a containing/owning object (context)?</li>
<li>DEFAULT: global object(except strict mode)</li>
</ol>
<p>Ref:</p>
<p><a href="https://frontendmasters.com/courses/advanced-javascript" target="_blank" rel="external">frontendmasters advanced-javascript</a></p>
<p><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You-Dont-Know-JS</a></p>
]]></content>
    
    <summary type="html">
    
      Kyle Simpson 在Frontend masters 的 javascript workshop
    
    </summary>
    
      <category term="javascript" scheme="http://swarchen.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://swarchen.github.io/tags/javascript/"/>
    
      <category term="this" scheme="http://swarchen.github.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>javascript - Hoisting</title>
    <link href="http://swarchen.github.io/2016/09/22/hoisting/"/>
    <id>http://swarchen.github.io/2016/09/22/hoisting/</id>
    <published>2016-09-22T11:28:37.000Z</published>
    <updated>2016-09-22T14:17:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>hoisting 是在javascript執行時的一個行為</p>
<p>javascript會在編譯的過程先將所有宣告(declarations)的變數做reference</p>
<a id="more"></a>
<p>用下面的例子解釋</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a;</div><div class="line">b;</div><div class="line"><span class="keyword">var</span> a = b;</div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line">b;</div><div class="line">a;</div></pre></td></tr></table></figure>
<p>而hoisting則會讓執行的結果變成</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a;</div><div class="line"><span class="keyword">var</span> b;</div><div class="line">a;</div><div class="line">b;</div><div class="line">a = b;</div><div class="line">b = <span class="number">2</span>;</div><div class="line">b;</div><div class="line">a;</div></pre></td></tr></table></figure>
<p>在執行的時候就會產生上述的結果</p>
<p>而在function也會有同樣的行為</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = b();</div><div class="line"><span class="keyword">var</span> c = d(); <span class="comment">// d is not a function</span></div><div class="line">a;</div><div class="line">c;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> d = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// function expression</span></div><div class="line">	<span class="keyword">return</span> b();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這裡 hoisting則會讓執行的結果變成</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a;</div><div class="line"><span class="keyword">var</span> c;</div><div class="line"><span class="keyword">var</span> d;</div><div class="line"></div><div class="line">a = b();</div><div class="line">c = d(); <span class="comment">// d is not a function</span></div><div class="line">a;</div><div class="line">c;</div><div class="line"></div><div class="line">d = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> b();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div class="alert info"><p>重複的 hoisting 會將前面的宣告覆蓋過去</p>
</div>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">foo(); <span class="comment">// "foo"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"bar"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"foo"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Hoisting 在做 mutual recursion 的時候非常重要</p>
<p>若沒有hoisting的話</p>
<p>永遠都會有一個function太晚宣告而無法正確執行程式</p>
<p>而hosting 讓下面的程式可以執行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">a(<span class="number">1</span>); <span class="comment">// 39</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">foo</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (foo &gt; <span class="number">20</span>) <span class="keyword">return</span> foo;</div><div class="line">	<span class="keyword">return</span> b(foo+<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">foo</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> c(foo) + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">foo</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a(foo*<span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div class="alert info"><p>用 let 宣告的變數不會進行hoisting</p>
</div>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (bar) &#123;</div><div class="line">		<span class="built_in">console</span>.log(baz);</div><div class="line">		<span class="keyword">let</span> baz = bar;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="string">"bar"</span>);</div></pre></td></tr></table></figure>
<p>Ref:</p>
<p><a href="https://frontendmasters.com/courses/advanced-javascript" target="_blank" rel="external">frontendmasters advanced-javascript</a></p>
<p><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You-Dont-Know-JS</a></p>
]]></content>
    
    <summary type="html">
    
      Kyle Simpson 在Frontend masters 的 javascript workshop
    
    </summary>
    
      <category term="javascript" scheme="http://swarchen.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://swarchen.github.io/tags/javascript/"/>
    
      <category term="hoisting" scheme="http://swarchen.github.io/tags/hoisting/"/>
    
  </entry>
  
  <entry>
    <title>javascript - Scope</title>
    <link href="http://swarchen.github.io/2016/09/22/javascript-%E7%9A%84Scope-Compiler/"/>
    <id>http://swarchen.github.io/2016/09/22/javascript-的Scope-Compiler/</id>
    <published>2016-09-22T04:20:07.000Z</published>
    <updated>2016-09-22T14:17:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>透過下面的例子瞭解javascript是怎麼運作的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> foo =<span class="string">"baz"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bax</span>(<span class="params">foo</span>)</span>&#123;</div><div class="line">	foo = <span class="string">"bam"</span>;</div><div class="line">	bam = <span class="string">"yay"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我原本的認知是第一行的code就是一次的宣告指令</p>
<p>但其實可以透過另一種方式來看這段程式碼</p>
<p>就是把自己當成naive top down compiler</p>
<p>並把compile拆成宣告跟執行兩個步驟</p>
<a id="more"></a>
<div class="alert success no-icon"><p>編譯</p>
</div>
<blockquote>
<ol>
<li>第一行，嘿 Scope global ，我找到了一個叫做 foo 的 var 宣告</li>
<li>第三行，嘿 Scope global ，我找到了一個叫做 bar 的 function 宣告</li>
<li>第四行，嘿 Scope bar ，我找到了一個叫做 foo 的 var 宣告</li>
<li>第七行，嘿 Scope blobal ，我找到了一個叫做 baz 的 function 宣告</li>
<li>第七行的 foo ， 嘿 Scope baz ，我找到了一個叫做 foo 的 var 宣告</li>
</ol>
</blockquote>
<div class="alert success no-icon"><p>執行</p>
</div>  
<blockquote>
<ol>
<li>第一行的 var 在執行階段已經不在，因為在 compile 階段已經宣告了 foo 成為一個 var，所以第一行在做的事情就是，向當前的 scope 去詢問，嘿 global scope，你有LHS reference 叫做foo的嗎？scope 會回應說有找到，並且直接將RHS assign 進LHS。<ul>
<li>在 = 左邊為LHS 也就是target, 右邊為RHS 也就是source</li>
<li>若 reference 不是 LHS，那就會是RHS</li>
</ul>
</li>
<li>假設我們執行了 function bar，這時就會問，嘿 bar scope，你有LHS reference 叫作foo的嗎？scope 會回應說有找到，並且直接將RHS assign 進LHS。</li>
<li>第七行，嘿， baz scope 你有LHS reference 叫作foo的嗎？scope 會回應說有找到，並且直接將RHS assign 進LHS。</li>
<li>第九行，嘿， baz scope 你有LHS reference 叫作bam的嗎？這時scope 會回應說沒有，這時候就會往外一層scope去找，再問，嘿，global scope，你有LHS reference 叫作bam的嗎？ 若在 unstrict 模式下 global scope 會回應說，「有啊，我幫你創造了一個」，這時 bam就變成了一個global variable了。</li>
</ol>
</blockquote>
<p>這邊稍微講一下 <span class="highlight-text red">undeclared</span>跟<span class="highlight-text red">undefined</span>的差別</p>
<div class="alert info"><p>undeclared:沒在任何的scope底下被宣告 </p>
</div>
<div class="alert info"><p>undefined:已宣告的變數但沒有任何實際的值 </p>
</div>
<p>例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="string">"bar"</span>; <span class="comment">//global scope</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> foo = <span class="string">"baz"</span>; <span class="comment">// bar scope </span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">foo</span>) </span>&#123;</div><div class="line">		foo = <span class="string">"bam"</span>; <span class="comment">// baz scope</span></div><div class="line">		bam = <span class="string">"yay"</span>; <span class="comment">// global scope</span></div><div class="line">	&#125;</div><div class="line">	baz();</div><div class="line">&#125;</div><div class="line">bar(); <span class="comment">//</span></div><div class="line">foo;   <span class="comment">// "bar" RHS</span></div><div class="line">bam;   <span class="comment">// "yay" RHS</span></div><div class="line">baz(); <span class="comment">// ReferenceError RHS</span></div></pre></td></tr></table></figure>
<p>在 LHS reference 沒被宣告的情況下，scope會自動幫你宣告</p>
<p>但 RHS reference 沒被宣告則會觸發 ReferenceError</p>
<h3 id="function-declaration"><a href="#function-declaration" class="headerlink" title="function declaration"></a>function declaration</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123; <span class="comment">// bar 是在global scope底下</span></div><div class="line">	<span class="keyword">var</span> foo = <span class="string">"baz"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">foo</span>) </span>&#123;</div><div class="line">		foo = bar;</div><div class="line">		foo;</div><div class="line">	&#125;</div><div class="line">	baz();</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(); <span class="comment">// undeclared</span></div><div class="line">bar();</div></pre></td></tr></table></figure>
<h3 id="function-expressions"><a href="#function-expressions" class="headerlink" title="function expressions"></a>function expressions</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123; <span class="comment">// bar 是在自己的scope底下</span></div><div class="line">	<span class="keyword">var</span> foo = <span class="string">"baz"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">foo</span>) </span>&#123;</div><div class="line">		foo = bar;</div><div class="line">		foo;</div><div class="line">	&#125;</div><div class="line">	baz();</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo();</div><div class="line">bar(); <span class="comment">// Error</span></div></pre></td></tr></table></figure>
<h3 id="block-scope"><a href="#block-scope" class="headerlink" title="block scope"></a>block scope</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	foo.length;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (err) &#123; <span class="comment">// err in catch block scope</span></div><div class="line">	<span class="built_in">console</span>.log(err); <span class="comment">// typeError</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(err); <span class="comment">// ReferenceError</span></div></pre></td></tr></table></figure>
<h3 id="IIFE-Immediately-invoked-function-expression"><a href="#IIFE-Immediately-invoked-function-expression" class="headerlink" title="IIFE (Immediately-invoked function expression)"></a>IIFE (Immediately-invoked function expression)</h3><p>可以避免global變數被我們寫的code所影響</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="string">"foo"</span>;</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 建立一個獨立的scope</span></div><div class="line">	<span class="keyword">var</span> foo = <span class="string">"foo2"</span>;</div><div class="line">	<span class="built_in">console</span>.log(foo); <span class="comment">// "foo2"</span></div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// "foo"</span></div></pre></td></tr></table></figure>
<h3 id="let-ES6"><a href="#let-ES6" class="headerlink" title="let (ES6)"></a>let (ES6)</h3><p>let 是在ES6 syntax中新的語法，讓變數只存在在block中，let不會hoisting，所以必須將let宣告放在最前面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> bar = <span class="string">"bar"</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;bar.length; i++)&#123; <span class="comment">// 讓i只存在在for loop的scope裡面</span></div><div class="line">		<span class="built_in">console</span>.log(bar.charAt(i));</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(i); <span class="comment">// RefferenceError</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (bar) &#123;</div><div class="line">		<span class="keyword">let</span> baz = bar;</div><div class="line">		<span class="keyword">if</span> (baz) &#123;</div><div class="line">			<span class="keyword">let</span> bam = baz;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">console</span>.log(bam); <span class="comment">//Error</span></div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(baz); <span class="comment">//Error</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="string">"bar"</span>);</div></pre></td></tr></table></figure>
<p>Ref:</p>
<p><a href="https://frontendmasters.com/courses/advanced-javascript" target="_blank" rel="external">frontendmasters advanced-javascript</a></p>
<p><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You-Dont-Know-JS</a></p>
]]></content>
    
    <summary type="html">
    
      Kyle Simpson 在Frontend masters 的 javascript workshop
    
    </summary>
    
      <category term="javascript" scheme="http://swarchen.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://swarchen.github.io/tags/javascript/"/>
    
      <category term="scope" scheme="http://swarchen.github.io/tags/scope/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Markdown 的使用</title>
    <link href="http://swarchen.github.io/2016/09/22/Hexo-Markdown-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://swarchen.github.io/2016/09/22/Hexo-Markdown-的使用/</id>
    <published>2016-09-21T16:53:50.000Z</published>
    <updated>2016-09-22T11:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="標題們"><a href="#標題們" class="headerlink" title="標題們"></a>標題們</h1><blockquote>
<h1 id="h1-title"><a href="#h1-title" class="headerlink" title="# h1 title"></a># h1 title</h1><h2 id="h2-title"><a href="#h2-title" class="headerlink" title="## h2 title"></a>## h2 title</h2><a id="more"></a>
<h1 id="強調"><a href="#強調" class="headerlink" title="強調"></a>強調</h1><p>* <em>italic</em> *</p>
<p> ** <strong>Bold</strong> **</p>
</blockquote>
<h1 id="清單"><a href="#清單" class="headerlink" title="清單"></a>清單</h1><h2 id="無編號"><a href="#無編號" class="headerlink" title="無編號"></a>無編號</h2><blockquote>
<ul>
<li>* Item1</li>
<li>* Item2<ul>
<li>* Item2a</li>
<li>* Item2b</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="有編號"><a href="#有編號" class="headerlink" title="有編號"></a>有編號</h2><blockquote>
<ol>
<li><ol>
<li>Item1</li>
</ol>
</li>
<li><ol>
<li>Item2</li>
<li>* Item2a</li>
<li>* Item2b</li>
</ol>
</li>
</ol>
</blockquote>
<h1 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h1><blockquote>
<p>![Markdown](<a href="https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/208px-Markdown-mark.svg.png\" target="_blank" rel="external">https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/208px-Markdown-mark.svg.png\</a>)</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/208px-Markdown-mark.svg.png" alt="Markdown"></p>
</blockquote>
<h1 id="連結"><a href="#連結" class="headerlink" title="連結"></a>連結</h1><blockquote>
<p>[Jhaocheng&#39;s GitHub](<a href="http://github.com/swarchen" target="_blank" rel="external">http://github.com/swarchen</a>)</p>
<p><a href="http://github.com/swarchen" target="_blank" rel="external">Jhaocheng&#39;s GitHub</a></p>
</blockquote>
<h1 id="文字區塊"><a href="#文字區塊" class="headerlink" title="文字區塊"></a>文字區塊</h1><blockquote>
<p>> text</p>
</blockquote>
<h1 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h1><blockquote>
<p>```javascript<br>&nbsp;&nbsp;function fancyAlert(arg) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if(arg) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.facebox({div:&#39;#foo&#39;})<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>```
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(arg) &#123;</div><div class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="標籤們"><a href="#標籤們" class="headerlink" title="標籤們"></a>標籤們</h1><div class="alert danger no-icon"><p>Here is a danger alert without icon</p>
</div>
<div class="alert info no-icon"><p>Here is a danger alert without icon</p>
</div>
<div class="alert success"><p>Here is a info alert with icon</p>
</div>
<div class="alert warning"><p>Here is a warning alert with icon</p>
</div>
<h1 id="高光"><a href="#高光" class="headerlink" title="高光"></a>高光</h1><span class="highlight-text danger">your highlighted text</span>
<blockquote>
<ul>
<li>Class<ul>
<li>red</li>
<li>green</li>
<li>blue</li>
<li>yellow</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      一些常用的 Markdown 整理，方便之後寫作快速查詢。
    
    </summary>
    
      <category term="writing" scheme="http://swarchen.github.io/categories/writing/"/>
    
    
      <category term="Markdown" scheme="http://swarchen.github.io/tags/Markdown/"/>
    
      <category term="Blog" scheme="http://swarchen.github.io/tags/Blog/"/>
    
      <category term="Writing" scheme="http://swarchen.github.io/tags/Writing/"/>
    
      <category term="部落格" scheme="http://swarchen.github.io/tags/%E9%83%A8%E8%90%BD%E6%A0%BC/"/>
    
      <category term="寫作" scheme="http://swarchen.github.io/tags/%E5%AF%AB%E4%BD%9C/"/>
    
  </entry>
  
</feed>
